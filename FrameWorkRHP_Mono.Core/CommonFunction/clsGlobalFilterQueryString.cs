using FrameWorkRHP_Mono.Core.CustomAttribute;
using System.ComponentModel.DataAnnotations.Schema;
using System.Numerics;
using System.Reflection; 

namespace FrameWorkRHP_Mono.Core.CommonFunction
{
    public class clsGlobalFilterQueryString<ModelParam> where ModelParam : class
    {

        public async Task<string> autoGeneratedFilterQueryString(string ParamFilter)
        {
            string result = string.Empty;
            string query = string.Empty;
            ParamFilter = ParamFilter.ToUpper();
            bool isNumber = true;
            bool isBooleans = true;
            try
            {
                var temp = Convert.ToDouble(ParamFilter);
            }
            catch  
            { 
                isNumber = false;    
            }

            try
            {
                var temp = Convert.ToBoolean(ParamFilter);
            }
            catch  
            {
                isBooleans = false;
            }

            ModelParam objModel = default(ModelParam);
            objModel = Activator.CreateInstance<ModelParam>();
            foreach (PropertyInfo prop in objModel.GetType().GetProperties())
            {
                if (!Attribute.IsDefined(prop, typeof(NotMappedAttribute)) && !Attribute.IsDefined(prop, typeof(NotIncludeFilteredQuery)) )
                {
                    if ((!isNumber && ( prop.PropertyType != typeof(float) &&
                                        prop.PropertyType != typeof(double) &&
                                        prop.PropertyType != typeof(decimal) &&
                                        prop.PropertyType != typeof(int) &&
                                        prop.PropertyType != typeof(byte) &&
                                        prop.PropertyType != typeof(long) &&
                                        prop.PropertyType != typeof(ulong) &&
                                        prop.PropertyType != typeof(Nullable<float>) &&
                                        prop.PropertyType != typeof(Nullable<double>) &&
                                        prop.PropertyType != typeof(Nullable<decimal>) &&
                                        prop.PropertyType != typeof(Nullable<int>) &&
                                        prop.PropertyType != typeof(Nullable<byte>) &&
                                        prop.PropertyType != typeof(Nullable<long>) &&
                                        prop.PropertyType != typeof(Nullable<ulong>))
                        ) || (!isBooleans && (  prop.PropertyType != typeof(bool) &&
                                                prop.PropertyType != typeof(Nullable<bool>))))
                    {
                        //KALAU TIPE ANGKA DAN FILTER BERUPA NON ANGKA MAKA SKIP SAJA
                        //OR    TIPE BOOLEAN DAN FILTER BERUPA NON BOOLEAN 
                        continue;
                    }
                    else if(prop.PropertyType == typeof(DateTimeOffset) || 
                            prop.PropertyType == typeof(DateOnly) || 
                            prop.PropertyType == typeof(DateTime) || 
                            prop.PropertyType == typeof(Nullable<DateTimeOffset>) || 
                            prop.PropertyType == typeof(Nullable<DateOnly>) ||
                            prop.PropertyType == typeof(Nullable<DateTime>))
                    {
                        query = "TO_CHAR(" + prop.Name + " , 'YYYY/MM/DD HH12:MM:SS') LIKE @paramFilter \r\n";
                        result += string.IsNullOrEmpty(result) ? query : " OR " + query;
                    }
                    else if (prop.PropertyType == typeof(float) || prop.PropertyType == typeof(double) || prop.PropertyType == typeof(decimal) ||
                                         prop.PropertyType == typeof(int) || prop.PropertyType == typeof(byte) || prop.PropertyType == typeof(long) ||
                                         prop.PropertyType == typeof(ulong) || prop.PropertyType == typeof(Nullable<float>) || prop.PropertyType == typeof(Nullable<double>) || prop.PropertyType == typeof(Nullable<decimal>) ||
                                         prop.PropertyType == typeof(Nullable<int>) || prop.PropertyType == typeof(Nullable<byte>) || prop.PropertyType == typeof(Nullable<long>) ||
                                         prop.PropertyType == typeof(Nullable<ulong>))
                    {
                        query = " CAST(" + prop.Name + " as text) LIKE @paramFilter \r\n";
                        result += string.IsNullOrEmpty(result) ? query : " OR " + query;
                    }
                    else if ( isBooleans && (prop.PropertyType == typeof(Nullable<bool>) || prop.PropertyType == typeof(bool)))
                    {
                        query =   prop.Name + " = " + Convert.ToBoolean(ParamFilter).ToString()+ " \r\n";
                        result += string.IsNullOrEmpty(result) ? query : " OR " + query;
                    }
                    else
                    {
                        query = "  upper(" + prop.Name + ") LIKE @paramFilter \r\n";
                        result += string.IsNullOrEmpty(result) ? query : " OR " + query;
                    }
                     
                }
            }


            return result;
        }

    }
}

using FrameWorkRHP_Mono.Core.CommonFunction;
using FrameWorkRHP_Mono.Core.Models.Custom;
using FrameWorkRHP_Mono.Core.Models.EF;
using FrameWorkRHP_Mono.Core.Models.ViewModels;
using FrameWorkRHP_Mono.Infrastructure.UOW;
using FrameWorkRHP_Mono.Services.Interfaces.GenericInterface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace FrameWorkRHP_Mono.Services.ServicesImplement
{
    public class MRoleXMenuServices : IGenericService<MRoleXMenu>
    {
        public IUnitOfWork _unitOfWork;

        public MRoleXMenuServices(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<bool> CreateData(MRoleXMenu ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await Validation(ParamModels);
                await _unitOfWork.MRoleXMenus.InsertAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<bool> DeleteData(int ParamIntId)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await _unitOfWork.MRoleXMenus.DeleteAsync(ParamIntId);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<IEnumerable<MRoleXMenu>> GetAllActiveData()
        {
            var filters = new List<Expression<Func<MRoleXMenu, bool>>>();
            filters.Add(x => x.Bitactive == true);
            return await _unitOfWork.MRoleXMenus.GetListByExpressionAsync(filters);
        }

        public async Task<IEnumerable<MRoleXMenu>> GetAllData()
        {
            return await _unitOfWork.MRoleXMenus.GetAllAsync();
        }

        public async Task<MRoleXMenu> GetDataById(int ParamIntId)
        {
            var result = await _unitOfWork.MRoleXMenus.GetByIdAsync(Convert.ToInt32(ParamIntId));
            result = result == null ? new MRoleXMenu() : result;
            return result;
        }

        public async Task<cstmResultModelDataTable> getWithDataTable(cstmFilterDataTable paramModel)
        {
            var filterParam = string.Empty;
            var searchQuery = string.Empty;
            if (!string.IsNullOrEmpty(paramModel.search.value))
            {
                filterParam = await new clsGlobalFilterQueryString<VwMRoleXMenu.indexDataTable>().autoGeneratedFilterQueryString(paramModel.search.value);
                searchQuery = " where " + filterParam;
                paramModel.search.value = paramModel.search.value.ToUpper();
            }

            var query = "SELECT\r\n  m.txtrolename , b.txtmenuname ,a.bitactive ,a.intmrolexmenuid  " + paramModel.getPaggingQuery +
                         " FROM\r\n  MRoleXMenu  a \r\n " +
                         " inner join mrole m on a.introleid = m.introleid \r\n " +
                         " inner join mmenu b on a.intmenuid = b.intmenuid " + searchQuery +
                         " ORDER BY\r\n   Intmrolexmenuid " + paramModel.paggingQuery;
            var result = await _unitOfWork.GenericDataTables.getWithDataTable<VwMRoleXMenu.indexDataTable>(query, paramModel.search.value, paramModel.draw);

            return result;
        }

        public async Task<bool> UpdateData(MRoleXMenu ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await Validation(ParamModels);
                await _unitOfWork.MRoleXMenus.UpdateAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }


        public async Task<bool> Validation(MRoleXMenu ParamModels)
        {
            string execption = string.Empty;

            try
            {
                if ( ParamModels.Intmrolexmenuid ==0)
                {
                    var filters = new List<Expression<Func<MRoleXMenu, bool>>>();
                    filters.Add(x => x.Intmenuid == ParamModels.Intmenuid && x.Introleid == ParamModels.Introleid);
                    var dtExisting = await _unitOfWork.MRoleXMenus.GetByExpressionAsync(filters);

                    if (dtExisting != null)
                        execption += "Roller and menu combinations are available" + Environment.NewLine;

                }


                if (string.IsNullOrWhiteSpace(execption))
                {
                    return true;
                }
                else
                {
                    throw new ArgumentException(execption);
                }
            }
            catch (Exception)
            {
                throw;
            }

        }
    }
}

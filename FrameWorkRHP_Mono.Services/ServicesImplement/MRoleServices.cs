using FrameWorkRHP_Mono.Core.CommonFunction;
using FrameWorkRHP_Mono.Core.Models.Custom;
using FrameWorkRHP_Mono.Core.Models.EF;
using FrameWorkRHP_Mono.Core.Models.ViewModels;
using FrameWorkRHP_Mono.Infrastructure.UOW;
using FrameWorkRHP_Mono.Services.Interfaces;
using FrameWorkRHP_Mono.Services.Interfaces.GenericInterface;
using System.Linq.Expressions;

namespace FrameWorkRHP_Mono.Services.ServicesImplement
{
    public class MRoleServices : IGenericService<Mrole>
    {
        public IUnitOfWork _unitOfWork;

        public MRoleServices(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<bool> CreateData(Mrole ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await Validation(ParamModels);
                await _unitOfWork.MRoles.InsertAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<bool> DeleteData(int ParamIntId)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await _unitOfWork.MRoles.DeleteAsync(ParamIntId);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public Task<IEnumerable<Mrole>> GetAllActiveData()
        {
            throw new NotImplementedException();
        }

        public async Task<IEnumerable<Mrole>> GetAllData()
        {
            return await _unitOfWork.MRoles.GetAllAsync();
        }

        public async Task<Mrole> GetDataById(int ParamIntId)
        {
            var result = await _unitOfWork.MRoles.GetByIdAsync(Convert.ToInt32(ParamIntId));
            result = result == null ? new Mrole() : result;
            return result;
        }

        public async Task<cstmResultModelDataTable> getWithDataTable(cstmFilterDataTable paramModel)
        {
            var filterParam = string.Empty;
            var searchQuery = string.Empty;
            if (!string.IsNullOrEmpty(paramModel.search.value))
            {
                filterParam = await new clsGlobalFilterQueryString<vwRole.indexDataTable>().autoGeneratedFilterQueryString(paramModel.search.value);
                searchQuery = " where " + filterParam;
                paramModel.search.value = paramModel.search.value.ToUpper();
            }

            var query = "SELECT\r\n   * " + paramModel.getPaggingQuery +
                         " FROM\r\n  mrole  mmn  " + searchQuery +
                         " ORDER BY\r\n   introleid " + paramModel.paggingQuery;
            var result = await _unitOfWork.GenericDataTables.getWithDataTable<vwRole.indexDataTable>(query, paramModel.search.value, paramModel.draw);

            return result;
        }

        public async Task<bool> UpdateData(Mrole ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await Validation(ParamModels);
                await _unitOfWork.MRoles.UpdateAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<bool> Validation(Mrole ParamModels)
        {
            string execption = string.Empty;

            try
            {
                if (string.IsNullOrWhiteSpace(ParamModels.Txtrolename))
                    execption += "Role name must be filled in" + Environment.NewLine;

                var filters = new List<Expression<Func<Mrole, bool>>>();
                filters.Add(x => x.Txtrolename.ToUpper() == ParamModels.Txtrolename.ToUpper());
                var dtExisting = await _unitOfWork.MRoles.GetByExpressionAsync(filters);

                if (dtExisting != null)
                    execption += "role name has already been registered" + Environment.NewLine;


                if (string.IsNullOrWhiteSpace(execption))
                {
                    return true;
                }
                else
                {
                    throw new ArgumentException(execption);
                }
            }
            catch (Exception)
            {
                throw;
            }

        }
    }
}

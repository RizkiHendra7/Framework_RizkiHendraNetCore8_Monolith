using FrameWorkRHP_Mono.Core.CommonFunction;
using FrameWorkRHP_Mono.Core.Models.Custom;
using FrameWorkRHP_Mono.Core.Models.EF;
using FrameWorkRHP_Mono.Core.Models.ViewModels;
using FrameWorkRHP_Mono.Infrastructure.Repository;
using FrameWorkRHP_Mono.Infrastructure.UOW;
using FrameWorkRHP_Mono.Services.Interfaces;
using FrameWorkRHP_Mono.Services.Interfaces.GenericInterface;
using System.Linq.Expressions;

namespace FrameWorkRHP_Mono.Services.ServicesImplement
{
    public class MUserServices : IGenericService<Muser> 
    {
        public IUnitOfWork _unitOfWork;

        public MUserServices(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<bool> CreateData(Muser ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await Validation(ParamModels);
                await _unitOfWork.MUsers.InsertAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<bool> DeleteData(int ParamIntId)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await _unitOfWork.MUsers.DeleteAsync(ParamIntId);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<IEnumerable<Muser>> GetAllActiveData()
        {
            var filters = new List<Expression<Func<Muser, bool>>>();
            filters.Add(x => x.Bitactive == true);
            return await _unitOfWork.MUsers.GetListByExpressionAsync(filters);
        }

        public async Task<IEnumerable<Muser>> GetAllData()
        {
            return await _unitOfWork.MUsers.GetAllAsync();
        }

        public async Task<Muser> GetDataById(int ParamIntId)
        {
            var result = await _unitOfWork.MUsers.GetByIdAsync(Convert.ToInt32(ParamIntId));
            result = result == null ? new Muser() : result;
            return result;
        }

        public async Task<cstmResultModelDataTable> getWithDataTable(cstmFilterDataTable paramModel)
        {
            var filterParam = string.Empty;
            var searchQuery = string.Empty;
            if (!string.IsNullOrEmpty(paramModel.search.value))
            {
                filterParam = await new clsGlobalFilterQueryString<VwUser.indexDataTable>().autoGeneratedFilterQueryString(paramModel.search.value);
                searchQuery = " where " + filterParam;
                paramModel.search.value = paramModel.search.value.ToUpper();
            }

            var query = "SELECT\r\n   * " + paramModel.getPaggingQuery+
                         " FROM\r\n  muser  "+ searchQuery+
                         " ORDER BY\r\n   intuserid " +paramModel.paggingQuery;
            var result = await _unitOfWork.GenericDataTables.getWithDataTable<VwUser.indexDataTable>(query, paramModel.search.value , paramModel.draw);
            return result;
        }
       
        public async Task<bool> UpdateData(Muser ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await Validation(ParamModels);
                await _unitOfWork.MUsers.UpdateAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<bool> Validation(Muser ParamModels)
        { 
            string execption = string.Empty;

            try
            {
                if (string.IsNullOrWhiteSpace(ParamModels.Txtusername))
                    execption += "User name must be filled in" + Environment.NewLine;

                if (string.IsNullOrWhiteSpace(ParamModels.Txtfullname))
                    execption += "full name must be filled in" + Environment.NewLine;

                if (string.IsNullOrWhiteSpace(ParamModels.Txtpassword)) 
                    execption += "Password must be filled in" + Environment.NewLine;
                

                if(ParamModels.Intuserid == 0)
                {
                    var filters = new List<Expression<Func<Muser, bool>>>();
                    filters.Add(x => x.Txtusername.ToUpper() == ParamModels.Txtusername.ToUpper());
                    var dtExisting = await _unitOfWork.MUsers.GetByExpressionAsync(filters);

                    if (dtExisting != null)
                        execption += "username has already been registered" + Environment.NewLine;
                }
                


                if (string.IsNullOrWhiteSpace(execption))
                {
                    return true;
                }
                else
                {
                    throw new ArgumentException(execption);
                } 
            }
            catch (Exception)
            { 
                throw;
            }
           
        }
    }
}

using FrameWorkRHP_Mono.Core.CommonFunction;
using FrameWorkRHP_Mono.Core.Models.Custom;
using FrameWorkRHP_Mono.Core.Models.EF;
using FrameWorkRHP_Mono.Core.Models.ViewModels;
using FrameWorkRHP_Mono.Infrastructure.Repository;
using FrameWorkRHP_Mono.Infrastructure.UOW;
using FrameWorkRHP_Mono.Services.Interfaces;
using FrameWorkRHP_Mono.Services.Interfaces.GenericInterface; 

namespace FrameWorkRHP_Mono.Services.ServicesImplement
{
    public class MUserService : IGenericService<Muser> 
    {
        public IUnitOfWork _unitOfWork;

        public MUserService(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<bool> CreateData(Muser ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await _unitOfWork.MUsers.InsertAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public async Task<bool> DeleteData(int ParamIntId)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await _unitOfWork.MUsers.DeleteAsync(ParamIntId);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }

        public Task<IEnumerable<Muser>> GetAllActiveData()
        {
            throw new NotImplementedException();
        }

        public async Task<IEnumerable<Muser>> GetAllData()
        {
            return await _unitOfWork.MUsers.GetAllAsync();
        }

        public async Task<Muser> GetDataById(int ParamIntId)
        {
            var MUserData = await _unitOfWork.MUsers.GetByIdAsync(Convert.ToInt32(ParamIntId));
            MUserData = MUserData == null ? new Muser() : MUserData;
            return MUserData;
        }

        public async Task<cstmResultModelDataTable> getWithDataTable(cstmFilterDataTable paramModel)
        {
            var filterParam = string.Empty;
            var searchQuery = string.Empty;
            if (!string.IsNullOrEmpty(paramModel.search.value))
            {
                filterParam = await new clsGlobalFilterQueryString<VwUser.indexDataTable>().autoGeneratedFilterQueryString(paramModel.search.value);
                searchQuery = " where " + filterParam;

            }

            var query = "SELECT\r\n   * " + paramModel.getPaggingQuery+
                         " FROM\r\n  muser  "+ searchQuery+
                         " ORDER BY\r\n   intuserid " +paramModel.paggingQuery;
            var result = await _unitOfWork.genericDataTables.getWithDataTable<VwUser.indexDataTable>(query, paramModel.search.value, paramModel.draw);
            return result;
        }
         

        public async Task<bool> UpdateData(Muser ParamModels)
        {
            try
            {
                _unitOfWork.CreateTransaction();
                await _unitOfWork.MUsers.UpdateAsync(ParamModels);
                await _unitOfWork.Save();
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                _unitOfWork.Rollback();
                throw;
            }
        }
    }
}
